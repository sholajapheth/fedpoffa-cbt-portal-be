"""Add Program and UserProgram models

Revision ID: afef16d27ff1
Revises: 7cbb583c3c7a
Create Date: 2025-07-20 03:37:30.839397

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "afef16d27ff1"
down_revision: Union[str, Sequence[str], None] = "7cbb583c3c7a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "programs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("code", sa.String(length=20), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("department_id", sa.UUID(), nullable=False),
        sa.Column("duration_years", sa.Integer(), nullable=True),
        sa.Column("level", sa.String(length=20), nullable=False),
        sa.Column("total_credits", sa.Integer(), nullable=True),
        sa.Column("program_coordinator_id", sa.UUID(), nullable=True),
        sa.Column("admission_requirements", sa.Text(), nullable=True),
        sa.Column("program_outline", sa.Text(), nullable=True),
        sa.Column("career_prospects", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_accepting_enrollments", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["program_coordinator_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.create_index(op.f("ix_programs_id"), "programs", ["id"], unique=False)
    op.create_table(
        "user_programs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("program_id", sa.UUID(), nullable=False),
        sa.Column("enrollment_date", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=True),
        sa.Column("current_level", sa.String(length=20), nullable=True),
        sa.Column("current_semester", sa.String(length=20), nullable=True),
        sa.Column("gpa", sa.Integer(), nullable=True),
        sa.Column("total_credits_earned", sa.Integer(), nullable=True),
        sa.Column("admission_number", sa.String(length=50), nullable=True),
        sa.Column("graduation_date", sa.DateTime(), nullable=True),
        sa.Column("remarks", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["program_id"],
            ["programs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_programs_id"), "user_programs", ["id"], unique=False)
    op.create_table(
        "student_responses",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("session_id", sa.UUID(), nullable=False),
        sa.Column("question_id", sa.UUID(), nullable=False),
        sa.Column("student_answer", sa.Text(), nullable=True),
        sa.Column("selected_options", sa.Text(), nullable=True),
        sa.Column("is_correct", sa.Boolean(), nullable=True),
        sa.Column("points_earned", sa.Integer(), nullable=True),
        sa.Column("feedback", sa.Text(), nullable=True),
        sa.Column("time_spent", sa.Integer(), nullable=True),
        sa.Column("attempts", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["question_id"],
            ["questions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["assessment_sessions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_student_responses_id"), "student_responses", ["id"], unique=False
    )
    # Add program_id column as nullable first
    op.add_column("courses", sa.Column("program_id", sa.UUID(), nullable=True))

    # Create a default program for existing courses
    # This will be handled in the application logic
    # For now, we'll make it nullable and update it later

    # Create foreign key constraint
    op.create_foreign_key(None, "courses", "programs", ["program_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "courses", type_="foreignkey")
    op.drop_column("courses", "program_id")
    op.drop_index(op.f("ix_student_responses_id"), table_name="student_responses")
    op.drop_table("student_responses")
    op.drop_index(op.f("ix_user_programs_id"), table_name="user_programs")
    op.drop_table("user_programs")
    op.drop_index(op.f("ix_programs_id"), table_name="programs")
    op.drop_table("programs")
    # ### end Alembic commands ###
